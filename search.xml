<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>JS封装工具</title>
    <url>/2023/02/23/JS%E5%B0%81%E8%A3%85%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<h1 id="防抖节流"><a href="#防抖节流" class="headerlink" title="防抖节流"></a>防抖节流</h1><p>防抖和节流是两种常用的前端优化技术，它们的目的都是为了提升网页性能和用户体验。</p>
<p>防抖和节流的主要区别在于它们执行的时机和效果。</p>
<p><strong>防抖 (Debounce)：</strong></p>
<p>防抖是指当事件被触发后，一定的时间内（如1000毫秒）不再触发该事件，才会执行事件处理函数。也就是说，如果在规定时间内事件再次被触发，则计时器会被重新启动，等待规定时间后才会执行事件处理函数。</p>
<p>防抖主要用于减少事件触发的次数，避免频繁地执行事件处理函数，从而提升性能和优化用户体验。例如，在搜索框输入时，可以通过防抖来减少搜索请求的次数。</p>
<p>防抖的实现代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 防抖函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fn 传入一个函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; delay 传入一个延迟时间(毫秒)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">debounce</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (timer) &#123;</span><br><span class="line">      <span class="built_in">clearTimeout</span>(timer);</span><br><span class="line">    &#125;</span><br><span class="line">    timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">      fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">    &#125;, delay);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 debounce 函数</span></span><br><span class="line"><span class="keyword">const</span> debounceFn = <span class="title function_">debounce</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行事件处理函数&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="title function_">debounceFn</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>节流 (Throttle)：</strong></p>
<p>节流是指规定时间内（如1000毫秒）只执行一次事件处理函数，即在该时间段内，无论该事件触发多少次，事件处理函数只会执行一次。</p>
<p>节流主要用于减少事件触发的频率，避免频繁地执行事件处理函数，从而提升性能和优化用户体验。例如，在滚动页面时，可以通过节流来减少滚动事件的触发次数。</p>
<p>节流的实现代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 节流函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; fn 传入一个函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; delay 传入一个延迟时间(毫秒)</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@returns</span> </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">throttle</span>(<span class="params">fn, delay</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> timer;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">function</span>(<span class="params">...args</span>) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!timer) &#123;</span><br><span class="line">      timer = <span class="built_in">setTimeout</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        fn.<span class="title function_">apply</span>(<span class="variable language_">this</span>, args);</span><br><span class="line">        timer = <span class="literal">null</span>;</span><br><span class="line">      &#125;, delay);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 调用 throttle 函数</span></span><br><span class="line"><span class="keyword">const</span> throttleFn = <span class="title function_">throttle</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;执行事件处理函数&#x27;</span>);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 触发事件</span></span><br><span class="line"><span class="title function_">throttleFn</span>();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><strong>综上所述，防抖和节流都是为了减少事件触发的频率，提升性能和优化用户体验。它们的区别在于执行事件处理函数的时机和效果，开发者应该根据实际情况选择使用哪种技术。</strong></p>
<h1 id="动画过度"><a href="#动画过度" class="headerlink" title="动画过度"></a>动画过度</h1><p>实现代码示例：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 动画效果函数</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">*</span>&#125; options </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createAnimation</span>(<span class="params">options</span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="keyword">from</span> = options.<span class="property">from</span>; <span class="comment">// 起始值</span></span><br><span class="line">    <span class="keyword">var</span> to = options.<span class="property">to</span>; <span class="comment">// 结束值</span></span><br><span class="line">    <span class="keyword">var</span> totalMS = options.<span class="property">totalMS</span> || <span class="number">1000</span>; <span class="comment">// 变化总时间</span></span><br><span class="line">    <span class="keyword">var</span> duration = options.<span class="property">duration</span> || <span class="number">15</span>; <span class="comment">// 变化间隔时间</span></span><br><span class="line">    <span class="keyword">var</span> times = <span class="title class_">Math</span>.<span class="title function_">floor</span>(totalMS / duration); <span class="comment">// 变化的次数</span></span><br><span class="line">    <span class="keyword">var</span> dis = (to - <span class="keyword">from</span>) / times; <span class="comment">// 每一次变化的值</span></span><br><span class="line">    <span class="keyword">var</span> curTimes = <span class="number">0</span>; <span class="comment">// 当前变化的次数</span></span><br><span class="line">    <span class="keyword">var</span> timerId = <span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">from</span> += dis;</span><br><span class="line">        curTimes++; <span class="comment">// 当前变化增加一次</span></span><br><span class="line">        <span class="keyword">if</span>(curTimes &gt;= times)&#123;</span><br><span class="line">            <span class="comment">// 变化的次数达到了</span></span><br><span class="line">            <span class="keyword">from</span> = to <span class="comment">// 变化完成了</span></span><br><span class="line">            <span class="built_in">clearInterval</span>(timerId);</span><br><span class="line">            options.<span class="property">onend</span> &amp;&amp; options.<span class="title function_">onend</span>()</span><br><span class="line">        &#125;</span><br><span class="line">        options.<span class="property">onmove</span> &amp;&amp; options.<span class="title function_">onmove</span>(<span class="keyword">from</span>)</span><br><span class="line">    &#125;, duration);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 使用案例</span></span><br><span class="line"><span class="comment">createAnimation(&#123;</span></span><br><span class="line"><span class="comment">    from: 120,</span></span><br><span class="line"><span class="comment">    to: 0,</span></span><br><span class="line"><span class="comment">    totalMS: 500,</span></span><br><span class="line"><span class="comment">    duration: 10,</span></span><br><span class="line"><span class="comment">    onmove: function(n) &#123;</span></span><br><span class="line"><span class="comment">        //n为只一次变化的值</span></span><br><span class="line"><span class="comment">    &#125;,</span></span><br><span class="line"><span class="comment">    onend: function() &#123;</span></span><br><span class="line"><span class="comment">        //变化完成后运行该函数</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">&#125;)</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>属性值的计算过程简介</title>
    <url>/2023/02/19/%E5%B1%9E%E6%80%A7%E5%80%BC%E7%9A%84%E8%AE%A1%E7%AE%97%E8%BF%87%E7%A8%8B%E7%AE%80%E4%BB%8B/</url>
    <content><![CDATA[<h1 id="在HTML元素中是如何给CSS属性复制-它是机怎么计算让所有属性都有值呢"><a href="#在HTML元素中是如何给CSS属性复制-它是机怎么计算让所有属性都有值呢" class="headerlink" title="在HTML元素中是如何给CSS属性复制? 它是机怎么计算让所有属性都有值呢?"></a><strong>在HTML元素中是如何给CSS属性复制? 它是机怎么计算让所有属性都有值呢?</strong></h1><p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192242439.png" alt="image-20230219224220381"></p>
<p>我们把HTML元素从无属性值到没一个属性都有值的计算过程叫<strong>CSS属性值计算过程</strong></p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192246997.png" alt="image-20230219224601965"></p>
<h2 id="属性值计算过程简介"><a href="#属性值计算过程简介" class="headerlink" title="属性值计算过程简介"></a><strong>属性值计算过程简介</strong></h2><p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192247110.png" alt="image-20230219224745069"></p>
<h3 id="1-确定声明值："><a href="#1-确定声明值：" class="headerlink" title="1.确定声明值："></a><strong>1.确定声明值：</strong></h3><p>参考样式表中没有冲突的声明，作为CSS属性值</p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192249707.png" alt="image-20230219224918571"></p>
<h3 id="2-层叠冲突："><a href="#2-层叠冲突：" class="headerlink" title="2.层叠冲突："></a><strong>2.层叠冲突：</strong></h3><p>对样式表有冲突的声明使用层叠规则，确定CSS属性值</p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192259987.png" alt="image-20230219225943865"></p>
<h3 id="3-使用继承："><a href="#3-使用继承：" class="headerlink" title="3.使用继承："></a><strong>3.使用继承：</strong></h3><p>对仍然没有值的属性，若可以继承，则继承父元素的值</p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192258704.png" alt="image-20230219225852597"></p>
<h3 id="4-使用默认值："><a href="#4-使用默认值：" class="headerlink" title="4.使用默认值："></a><strong>4.使用默认值：</strong></h3><p>对仍然没有值的属性，使用默认值</p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192301360.png" alt="image-20230219230139268"></p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a><strong>总结</strong></h2><p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192302331.png" alt="image-20230219230242190"></p>
<p><img src="https://raw.githubusercontent.com/Mazawar/pic/main/202302192302959.png" alt="image-20230219230253862"></p>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>HTML</tag>
        <tag>CSS</tag>
      </tags>
  </entry>
  <entry>
    <title>标准库</title>
    <url>/2023/02/20/%E6%A0%87%E5%87%86%E5%BA%93/</url>
    <content><![CDATA[<h2 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h2><p>如果尝试着把原始类型（number、string、boolean）当做对象使用，JS会自动将其转换为对应包装类的实例</p>
<h3 id="Number"><a href="#Number" class="headerlink" title="Number"></a>Number</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/NaN">Number.NaN</a></td>
<td>表示一个数学上并不存在的数字</td>
<td>可以直接书写为<code>NaN</code></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isNaN">Number.isNaN()</a></td>
<td>判断传入的值是否是NaN</td>
<td>可以直接书写为<code>isNaN</code></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/isInteger">Number.isInteger()</a></td>
<td>判断传入的值是否是整数</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseInt">Number.parseInt()</a></td>
<td>把传入的值转换为整数形式返回</td>
<td>可以直接书写为<code>parseInt()</code></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat">Number.parseFloat()</a></td>
<td>把传入的值转换为小数形式返回</td>
<td>可以直接书写为<code>parseFloat()</code></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed">Number.prototype.toFixed()</a></td>
<td>将当前数字保留指定位数的小数返回</td>
<td>传入小数位数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/tostring">Number.prototype.toString()</a></td>
<td>将当前数字转换为字符串返回</td>
<td>传入进制2-36</td>
</tr>
</tbody></table>
<h3 id="String"><a href="#String" class="headerlink" title="String"></a>String</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/fromCharCode">String.fromCharCode()</a></td>
<td>根据编码值得到一个字符</td>
<td>传入一个或多个编码值</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/length">String.prototype.length</a></td>
<td>得到字符串的长度</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt">String.prototype.charCodeAt()</a></td>
<td>得到某个下标的字符编码</td>
<td>传入下标</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/includes">String.prototype.includes()</a></td>
<td>判断当前字符串是否包含某个子串</td>
<td>传入子串</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/indexOf">String.prototype.indexOf()</a></td>
<td>判断某个字符串在当前字符串中的第一个下标位置</td>
<td>如果没有，返回-1</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/lastIndexOf">String.prototype.lastIndexOf()</a></td>
<td>判断某个字符串在当前字符串中的最后一个下标位置</td>
<td>如果没有，返回-1</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith">String.prototype.endsWith()</a></td>
<td>判断某个字符串是否以指定的字符串结束</td>
<td>传入一个字符串</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith">String.prototype.startsWith()</a></td>
<td>判断某个字符串是否以指定的字符串开始</td>
<td>传入一个字符串</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padStart">String.prototype.padStart()</a></td>
<td>将当前的字符串按照指定的字符在字符串开始位置填充到指定的位数，返回填充后的字符串</td>
<td>传入位数、填充字符</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/padEnd">String.prototype.padEnd()</a></td>
<td>将当前的字符串按照指定的字符在字符串结束位置填充到指定的位数，返回填充后的字符串</td>
<td>传入位数、填充字符</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/split">String.prototype.split()</a></td>
<td>把当前字符串按照某个字符串分割成一个字符串数组返回</td>
<td>传入分隔符</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/substring">String.prototype.substring()</a></td>
<td>返回一个字符串在开始索引到结束索引之间的一个子集, 或从开始索引直到字符串的末尾的一个子集</td>
<td>传入开始字符、结束字符</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/Trim">String.prototype.trim()</a></td>
<td>从字符串的两端删除空白字符，返回新字符串</td>
<td>无参数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimStart">String.prototype.trimStart()</a></td>
<td>从字符串的开头删除空白字符，返回新字符串</td>
<td>无参数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/trimEnd">String.prototype.trimEnd()</a></td>
<td>从字符串的末端删除空白字符，返回新字符串</td>
<td>无参数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toUpperCase">String.prototype.toUpperCase()</a></td>
<td>将调用该方法的字符串转为大写形式并返回</td>
<td>无参数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/toLowerCase">String.prototype.toLowerCase()</a></td>
<td>将调用该方法的字符串转为小写形式并返回</td>
<td>无参数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replace">String.prototype.replace()</a></td>
<td>替换字符串中的第一个对应字符为新字符</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/replaceall">String.prototype.replaceAll()</a></td>
<td>替换字符串中的所有对应字符为新字符</td>
<td></td>
</tr>
</tbody></table>
<h2 id="数学"><a href="#数学" class="headerlink" title="数学"></a>数学</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/PI">Math.PI</a></td>
<td>得到圆周率π</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/abs">Math.abs()</a></td>
<td>求某个数绝对值</td>
<td>传入一个数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/ceil">Math.ceil()</a></td>
<td>向上取整</td>
<td>传入一个数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/floor">Math.floor()</a></td>
<td>向下取整</td>
<td>传入一个数</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/max">Math.max()</a></td>
<td>求一个数列中的最大值</td>
<td>把数列依次传入</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/min">Math.min()</a></td>
<td>求一个数列中的最小值</td>
<td>把数列依次传入</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/random">Math.random()</a></td>
<td>得到一个0-1之间的随机小数</td>
<td>无参；无法取到1</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Math/round">Math.round()</a></td>
<td>返回四舍五入的结果</td>
<td>传入一个数</td>
</tr>
</tbody></table>
<h2 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h2><h3 id="时间基础知识"><a href="#时间基础知识" class="headerlink" title="时间基础知识"></a>时间基础知识</h3><h4 id="单位"><a href="#单位" class="headerlink" title="单位"></a>单位</h4><table>
<thead>
<tr>
<th>单位</th>
<th>名称</th>
<th>换算</th>
</tr>
</thead>
<tbody><tr>
<td>hour</td>
<td>小时</td>
<td>1 day &#x3D; 24 hours</td>
</tr>
<tr>
<td>minute</td>
<td>分钟</td>
<td>1 hour &#x3D; 60 minutes</td>
</tr>
<tr>
<td>second</td>
<td>秒</td>
<td>1 minute &#x3D; 60 seconds</td>
</tr>
<tr>
<td>millisecond （ms）</td>
<td>毫秒</td>
<td>1 second &#x3D; 1000 ms</td>
</tr>
<tr>
<td>nanosecond （ns）</td>
<td>纳秒</td>
<td>1 ms &#x3D; 1000 ns</td>
</tr>
</tbody></table>
<h4 id="GMT和UTC"><a href="#GMT和UTC" class="headerlink" title="GMT和UTC"></a>GMT和UTC</h4><p>世界划分为24个时区，北京在东8区，格林威治在0时区。</p>
<p><strong>GMT</strong>：Greenwish Mean Time 格林威治世界时。太阳时，精确到毫秒。</p>
<p><strong>UTC</strong>：Universal Time Coodinated 世界协调时。以原子时间为计时标准，精确到纳秒。</p>
<blockquote>
<p>国际标准中，已全面使用UTC时间，而不再使用GMT时间</p>
</blockquote>
<p>GMT和UTC时间在文本表示格式上是一致的，均为<code>星期缩写, 日期 月份 年份 时间 GMT</code>，例如：</p>
<figure class="highlight apache"><table><tr><td class="code"><pre><span class="line"><span class="attribute">Thu</span>, <span class="number">27</span> Aug <span class="number">2020</span> <span class="number">08</span>:<span class="number">01</span>:<span class="number">44</span> GMT</span><br></pre></td></tr></table></figure>

<p>另外，ISO 8601标准规定，建议使用以下方式表示时间：</p>
<figure class="highlight ruby"><table><tr><td class="code"><pre><span class="line"><span class="variable constant_">YYYY</span>-<span class="variable constant_">MM</span>-<span class="variable constant_">DDTHH</span><span class="symbol">:mm</span><span class="symbol">:ss</span>.msZ</span><br><span class="line">例如：</span><br><span class="line"><span class="number">2020</span>-08-27<span class="symbol">T08:</span><span class="number">01</span><span class="symbol">:</span><span class="number">44</span>.000Z</span><br></pre></td></tr></table></figure>

<p><strong>GMT、UTC、ISO 8601都表示的是零时区的时间</strong></p>
<h4 id="Unix-时间戳"><a href="#Unix-时间戳" class="headerlink" title="Unix 时间戳"></a>Unix 时间戳</h4><blockquote>
<p>Unix 时间戳（Unix Timestamp）是Unix系统最早提出的概念</p>
</blockquote>
<p>它将UTC时间1970年1月1日凌晨作为起始时间，到指定时间经过的秒数（毫秒数）</p>
<h4 id="程序中的时间处理"><a href="#程序中的时间处理" class="headerlink" title="程序中的时间处理"></a>程序中的时间处理</h4><p><strong>程序对时间的计算、存储务必使用UTC时间，或者时间戳</strong></p>
<p><strong>在和用户交互时，将UTC时间或时间戳转换为更加友好的文本</strong></p>
<p>思考下面的问题：</p>
<ol>
<li>用户的生日是本地时间还是UTC时间？</li>
<li>如果要比较两个日期的大小，是比较本地时间还是比较UTC时间？</li>
<li>如果要显示文章的发布日期，是显示本地时间还是显示UTC时间？</li>
<li><code>北京时间2020-8-28 10:00:00</code>和<code>格林威治2020-8-28 02:00:00</code>，两个时间哪个大，哪个小？</li>
<li><code>北京的时间戳为0</code>和<code>格林威治的时间戳为0</code>，它们的时间一样吗？</li>
<li>一个中国用户注册时填写的生日是<code>1970-1-1</code>，它出生的UTC时间是多少？时间戳是多少？</li>
</ol>
<h3 id="日期API"><a href="#日期API" class="headerlink" title="日期API"></a>日期API</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date</a></p>
<p>构造函数：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(); <span class="comment">// 得到一个当前日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(value); <span class="comment">// 根据时间戳得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(dateString); <span class="comment">// 根据一个标准日期字符串得到一个日期对象</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Date</span>(year, monthIndex [, day [, hours [, minutes [, seconds [, milliseconds]]]]]); <span class="comment">// 根据年、月、日、小时、分钟、秒、毫秒得到一个日期对象</span></span><br></pre></td></tr></table></figure>

<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/now">Date.now()</a></td>
<td>得到当前时间戳</td>
<td>无参</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getFullYear">Date.prototype.getFullYear()</a></td>
<td>得到年</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMonth">Date.prototype.getMonth()</a></td>
<td>得到月</td>
<td>无参；本地时间；范围0-11</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getDate">Date.prototype.getDate()</a></td>
<td>得到日</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getHours">Date.prototype.getHours()</a></td>
<td>得到小时</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMinutes">Date.prototype.getMinutes()</a></td>
<td>得到分钟</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getSeconds">Date.prototype.getSeconds()</a></td>
<td>得到秒</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/getMilliseconds">Date.prototype.getMilliseconds()</a></td>
<td>得到毫秒</td>
<td>无参；本地时间；</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Date/toLocaleString">Date.prototype.toLocaleString()</a></td>
<td>得到日期本地的表示方式</td>
<td></td>
</tr>
</tbody></table>
<h2 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">Object.assign()</a></td>
<td>将多个对象的属性混合到一起</td>
<td>后面覆盖前面</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/getPrototypeOf">Object.getPrototypeOf()</a></td>
<td>获取一个对象的隐式原型</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf">Object.setPrototypeOf()</a></td>
<td>设置一个对象的隐式原型</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/create">Object.create()</a></td>
<td>创建一个新对象，同时设置新对象的隐式原型</td>
<td></td>
</tr>
</tbody></table>
<h2 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat">Array.prototype.concat()</a></td>
<td>把多个数组拼接成一个</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes">Array.prototype.includes()</a></td>
<td>判断数组中是否包含某个值</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf">Array.prototype.indexOf()</a></td>
<td>得到数组中某个值的第一个下标</td>
<td>若不存在则返回-1</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf">Array.prototype.lastIndexOf()</a></td>
<td>得到数组中某个值的最后一个下标</td>
<td>若不存在则返回-1</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join">Array.prototype.join()</a></td>
<td>把数组中每一项使用某个字符连接起来，形成一个字符串返回</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push">Array.prototype.push()</a></td>
<td>向数组的末尾添加一项</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift">Array.prototype.unshift()</a></td>
<td>向数组的开头添加一项</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop">Array.prototype.pop()</a></td>
<td>删除数组最后一项</td>
<td>返回被删除的值</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift">Array.prototype.shift()</a></td>
<td>删除数组第一项</td>
<td>返回被删除的值</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice">Array.prototype.splice()</a></td>
<td>删除、修改、插入任何位置的值</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse">Array.prototype.reverse()</a></td>
<td>将数组中的元素顺序颠倒</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort">Array.prototype.sort()</a></td>
<td>对数组进行排序</td>
<td>传入比较函数：0-位置不变，&lt;0-前者在前，&gt;0-前者在后</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice">Array.prototype.slice()</a></td>
<td>对数组进行切割</td>
<td></td>
</tr>
</tbody></table>
<h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function">https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">Function.prototype.apply()</a></td>
<td>执行函数，绑定this</td>
<td>参数列表以数组的形式传递</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Function/call">Function.prototype.call()</a></td>
<td>执行函数，绑定this</td>
<td>参数列表依次传递</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
  <entry>
    <title>WebAPI</title>
    <url>/2023/02/24/WebAPI/</url>
    <content><![CDATA[<h1 id="WebAPI"><a href="#WebAPI" class="headerlink" title="WebAPI"></a>WebAPI</h1><p>和标准库不同，WebAPI 是<strong>浏览器</strong>提供的一套 API，用于操作浏览器窗口和界面</p>
<p>WebAPI 中包含两个部分：</p>
<ul>
<li>BOM：Browser Object Model，浏览器模型，提供和浏览器相关的操作</li>
<li>DOM：Document Object Model，文档模型，提供和页面相关的操作</li>
</ul>
<h2 id="BOM"><a href="#BOM" class="headerlink" title="BOM"></a>BOM</h2><p>BOM 提供了一系列的对象和函数，提供和浏览器本身相关的操作</p>
<h3 id="window"><a href="#window" class="headerlink" title="window"></a>window</h3><p>全局对象</p>
<p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window">https://developer.mozilla.org/zh-CN/docs/Web/API/Window/window</a></p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/open"><code>open()</code></a></td>
<td>打开一个新的浏览器窗口</td>
<td>返回新窗口的 window 对象</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/close"><code>close()</code></a></td>
<td>关闭浏览器窗口</td>
<td>只能关闭使用 open 打开的浏览器窗口</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setTimeout"><code>setTimeout()</code></a></td>
<td>设置一个计时器<br />在一段时间后自动执行某个函数</td>
<td>参数 1：函数，无参，this 指向 window<br />参数 2：时间，毫秒<br />返回：计时器的 ID</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/clearTimeout"><code>clearTimeout()</code></a></td>
<td>清除指定 ID 的计时器</td>
<td>传入计时器的 ID</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/setInterval"><code>setInterval()</code></a></td>
<td>设置一个计时器<br />每隔一段时间自动执行某个函数</td>
<td>参数 1：函数，无参，this 指向 window<br />参数 2：时间，毫秒<br />返回：计时器的 ID</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/clearInterval"><code>clearInterval()</code></a></td>
<td>清除指定 ID 的计时器</td>
<td>传入计时器的 ID</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/alert"><code>alert()</code></a></td>
<td>弹出提示框</td>
<td>不同的操作系统外观有差异</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Window/confirm"><code>confirm()</code></a></td>
<td>弹出确认框</td>
<td>不同的操作系统外观有差异</td>
</tr>
</tbody></table>
<h3 id="window-location"><a href="#window-location" class="headerlink" title="window.location"></a>window.location</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location">https://developer.mozilla.org/zh-CN/docs/Web/API/Location</a></p>
<p>提供地址栏的相关操作</p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/href"><code>Location.href</code></a></td>
<td>获取或设置页面当前地址</td>
<td>设置地址回导致页面跳转</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/protocol"><code>Location.protocol</code></a></td>
<td>获取或设置地址中的协议部分</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/host"><code>Location.host</code></a></td>
<td>获取或设置地址中的主机名和端口号</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hostname"><code>Location.hostname</code></a></td>
<td>获取或设置地址中的主机名</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/port"><code>Location.port</code> </a></td>
<td>获取或设置地址中的端口号</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/en-US/docs/Web/API/Location/pathname"><code>Location.pathname</code> </a></td>
<td>获取或设置地址中的路径部分</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/search"><code>Location.search</code></a></td>
<td>获取或设置地址中的参数部分</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/hash"><code>Location.hash</code></a></td>
<td>获取或设置地址中的 hash 部分</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Location/reload"><code>Location.reload()</code></a></td>
<td>刷新页面</td>
<td></td>
</tr>
</tbody></table>
<h3 id="window-history"><a href="#window-history" class="headerlink" title="window.history"></a>window.history</h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History">https://developer.mozilla.org/zh-CN/docs/Web/API/History</a></p>
<p>提供当前窗口历史记录的操作</p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/back"><code>History.back()</code></a></td>
<td>后退</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/forward"><code>History.forward()</code></a></td>
<td>前进</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/go"><code>History.go()</code></a></td>
<td>根据相对当前页面的偏移量，<br />进入指定的记录页</td>
<td></td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/pushState"><code>History.pushState()</code></a></td>
<td>在历史记录中添加一条记录</td>
<td>页面不刷新</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/History/replaceState"><code>History.replaceState()</code></a></td>
<td>替换当前记录</td>
<td>页面不刷新</td>
</tr>
</tbody></table>
<h2 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h2><p>DOM 是一个对象，它对应到 HTML 中的节点</p>
<h3 id="获取-dom"><a href="#获取-dom" class="headerlink" title="获取 dom"></a>获取 dom</h3><table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>document.getElementById()</td>
<td>根据元素 id 获取 dom</td>
<td>得到单个 dom</td>
</tr>
<tr>
<td>document.getElementsByTagName()<br />dom.getElementsByTagName()</td>
<td>根据元素名称获取 dom</td>
<td>得到 dom 的伪数组</td>
</tr>
<tr>
<td>document.getElementsByClassName()<br />dom.getElementsByClassName()</td>
<td>根据元素类样式获取 dom</td>
<td>得到 dom 的伪数组</td>
</tr>
<tr>
<td>document.querySelector()<br />dom.querySelector()</td>
<td>根据 CSS 选择器获取 dom</td>
<td>得到第一个匹配的 dom</td>
</tr>
<tr>
<td>document.querySelectorAll()<br />dom.querySelectorAll()</td>
<td>根据 CSS 选择器获取 dom</td>
<td>得到所有匹配的 dom<br />伪数组</td>
</tr>
<tr>
<td>document.documentElement</td>
<td>获取 html 元素</td>
<td></td>
</tr>
<tr>
<td>document.body</td>
<td>获取 body</td>
<td></td>
</tr>
<tr>
<td>document.head</td>
<td>获取 head</td>
<td></td>
</tr>
<tr>
<td>dom.children</td>
<td>获取 dom 的子元素</td>
<td>得到 dom 的伪数组</td>
</tr>
<tr>
<td>dom.childNodes</td>
<td>获取 dom 的子节点</td>
<td>得到 dom 节点的伪数组<br />关于节点对象点<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node">这里</a></td>
</tr>
<tr>
<td>dom.previousElementSibling</td>
<td>得到 dom 前一个兄弟元素</td>
<td></td>
</tr>
<tr>
<td>dom.nextElementSibling</td>
<td>得到 dom 后一个兄弟元素</td>
<td></td>
</tr>
<tr>
<td>dom.parentElement</td>
<td>得到 dom 的父元素</td>
<td></td>
</tr>
</tbody></table>
<h3 id="创建-dom"><a href="#创建-dom" class="headerlink" title="创建 dom"></a>创建 dom</h3><table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>document.createElement()</td>
<td>创建一个 dom 并返回</td>
<td>传入元素名称</td>
</tr>
</tbody></table>
<h3 id="更改-dom-结构"><a href="#更改-dom-结构" class="headerlink" title="更改 dom 结构"></a>更改 dom 结构</h3><p>这里是指更改文档树（DOM 树）</p>
<table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>dom.remove()</td>
<td>从文档树中删除 dom</td>
<td>不是删除对象</td>
</tr>
<tr>
<td>dom.removeChild()</td>
<td>删除 dom 的某个子节点</td>
<td>传入 dom 对象</td>
</tr>
<tr>
<td><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/Node/insertBefore"><code>dom.insertBefore()</code></a></td>
<td>在 dom 的子节点中，添加一个新节点到另一个节点之前</td>
<td></td>
</tr>
<tr>
<td>dom.appendChild()</td>
<td>添加一个新节点到 dom 的子节点末尾</td>
<td>传入 dom 对象</td>
</tr>
</tbody></table>
<h3 id="dom-属性"><a href="#dom-属性" class="headerlink" title="dom 属性"></a>dom 属性</h3><p>本节的「属性」，是指 HTML 元素的「属性」</p>
<p>属性有两种：</p>
<ul>
<li>标准属性：HTML 元素本身拥有的属性，例如：<ul>
<li>a 元素的 href、title</li>
<li>input 的 value</li>
<li>img 的 src</li>
<li>……</li>
</ul>
</li>
<li>自定义属性：HTML 元素标准中未定义的属性</li>
</ul>
<p><strong>所有标准属性均可通过 <code>dom.属性名</code> 得到，其中：</strong></p>
<ul>
<li><p>布尔属性会被自动转换为 boolean</p>
</li>
<li><p>路径类的属性会被转换为绝对路径</p>
</li>
<li><p>标准属性始终都是存在的，不管你是否有在元素中属性该属性</p>
</li>
<li><p>class 由于和关键字重名，因此需要使用 className</p>
</li>
</ul>
<p><strong>所有的自定义属性均可通过下面的方式操作：</strong></p>
<ul>
<li><code>dom.setAttribute(name, value)</code>，设置属性键值对</li>
<li><code>dom.getAttribute(name)</code>，获取属性值</li>
</ul>
<p>自定义属性和元素源码书写是对应的，可以尝试获取 a 元素的 href 属性对比标准属性，看看有什么不同。</p>
<h3 id="dom-内容"><a href="#dom-内容" class="headerlink" title="dom 内容"></a>dom 内容</h3><table>
<thead>
<tr>
<th>API</th>
<th>含义</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>dom.innerText</td>
<td>获取或设置元素文本内容</td>
<td>设置时会自动进行 HTML 实体编码</td>
</tr>
<tr>
<td>dom.innerHTML</td>
<td>获取或设置元素的 HTML 内容</td>
<td></td>
</tr>
</tbody></table>
<h3 id="dom-样式"><a href="#dom-样式" class="headerlink" title="dom 样式"></a>dom 样式</h3><p>在 JS 中，有两种样式：</p>
<ul>
<li>内联样式：元素的 style 属性中书写的样式</li>
<li>计算样式（最终样式）：元素最终计算出来的样式</li>
</ul>
<p><strong>JS 可以获取内联样式和计算样式，但只能设置内联样式</strong></p>
<p>下面罗列了样式的常见操作：</p>
<ul>
<li><code>dom.style</code>：获取元素的内联样式，得到样式对象<ul>
<li>对象中的所有样式属性均可以被赋值，赋值后即可应用样式到元素的 style 中</li>
</ul>
</li>
<li><code>getComputedStyle(dom)</code>：获取元素的计算样式，得到一个样式对象<ul>
<li>该样式对象中的属性是只读的，无法被重新赋值</li>
</ul>
</li>
</ul>
<p>关于<strong>样式对象</strong>，注意：</p>
<ul>
<li>当给样式赋值为空字符串时，相当于删除内联样式</li>
<li>当给样式的赋值不合法时，赋值语句无效，不会报错</li>
<li>CSS 的短横线命名法，在属性名中表现为驼峰命名法</li>
</ul>
<h3 id="监听-dom-事件"><a href="#监听-dom-事件" class="headerlink" title="监听 dom 事件"></a>监听 dom 事件</h3><p>监听事件可以描述为一句话：</p>
<p><strong>某个 DOM</strong>发生了<strong>某件事</strong>之后，我需要做<strong>某些处理</strong></p>
<ul>
<li>某个 DOM：监听谁？</li>
<li>某件事（事件类型）：它发生了什么？</li>
<li>某些处理（处理函数）：我要做什么？</li>
</ul>
<p>下面是一段事件监听代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 为dom注册点击事件，当被点击时，自动运行事件处理函数</span></span><br><span class="line">dom.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;dom 被点击了&#x27;</span>);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>

<h4 id="事件类型"><a href="#事件类型" class="headerlink" title="事件类型"></a>事件类型</h4><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/Events">https://developer.mozilla.org/zh-CN/docs/Web/Events</a></p>
<h5 id="表单类事件"><a href="#表单类事件" class="headerlink" title="表单类事件"></a>表单类事件</h5><table>
<thead>
<tr>
<th>事件名称</th>
<th>触发时机</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>submit</td>
<td>表单被提交时触发</td>
<td>注册到 form 元素上</td>
</tr>
<tr>
<td>input</td>
<td>文本框改变后立即出发</td>
<td>注册到 input、textarea 上</td>
</tr>
<tr>
<td>change</td>
<td>文本框改变后、失去焦点时触发<br />下拉列表、多选框、单选框改变后立即触发</td>
<td>注册到 input、select、textarea 上</td>
</tr>
<tr>
<td>reset</td>
<td>表单被重置时触发</td>
<td>注册到 form 元素上</td>
</tr>
<tr>
<td>focus</td>
<td>元素聚焦时触发</td>
<td></td>
</tr>
<tr>
<td>blur</td>
<td>元素失去焦点时触发</td>
<td></td>
</tr>
</tbody></table>
<h5 id="鼠标类事件"><a href="#鼠标类事件" class="headerlink" title="鼠标类事件"></a>鼠标类事件</h5><table>
<thead>
<tr>
<th>事件名称</th>
<th>触发时机</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>click</td>
<td>鼠标按下抬起后触发</td>
<td></td>
</tr>
<tr>
<td>contextmenu</td>
<td>右键菜单显示前触发</td>
<td></td>
</tr>
<tr>
<td>mousedown</td>
<td>鼠标按下时触发</td>
<td></td>
</tr>
<tr>
<td>mouseup</td>
<td>鼠标抬起时触发</td>
<td></td>
</tr>
<tr>
<td>mousemove</td>
<td>鼠标在元素上移动时触发</td>
<td></td>
</tr>
<tr>
<td>mouseenter</td>
<td>鼠标进入元素时触发（不冒泡）</td>
<td></td>
</tr>
<tr>
<td>mouseleave</td>
<td>鼠标离开元素时触发（不冒泡）</td>
<td></td>
</tr>
<tr>
<td>mouseover</td>
<td>鼠标进入元素时触发（冒泡）</td>
<td></td>
</tr>
<tr>
<td>mouseout</td>
<td>鼠标离开元素时触发（冒泡）</td>
<td></td>
</tr>
<tr>
<td>wheel</td>
<td>鼠标滚轮滚动时触发</td>
<td></td>
</tr>
</tbody></table>
<h5 id="键盘事件"><a href="#键盘事件" class="headerlink" title="键盘事件"></a>键盘事件</h5><table>
<thead>
<tr>
<th>事件名称</th>
<th>触发时机</th>
<th>备注</th>
</tr>
</thead>
<tbody><tr>
<td>keydown</td>
<td>某个键被按下时触发</td>
<td></td>
</tr>
<tr>
<td>keyup</td>
<td>某个键被抬起时触发</td>
<td></td>
</tr>
</tbody></table>
<h4 id="注册事件"><a href="#注册事件" class="headerlink" title="注册事件"></a>注册事件</h4><p>JS 提供了三种方式注册事件</p>
<p>方式 1：将事件注册写到元素上，这种方式基本被弃用</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">&quot;js代码&quot;</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>&#x3D;&#x3D;方式 2：使用 dom 属性注册事件&#x3D;&#x3D;</p>
<p>属性名为<code>on+事件类型</code></p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 监听事件</span></span><br><span class="line">dom.<span class="property">onclick</span> = <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">// 移除监听事件</span></span><br><span class="line">dom.<span class="property">onclick</span> = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure>

<p>这种方式的特点是：</p>
<ul>
<li>优点：易于监听、覆盖、移除</li>
<li>缺点：只能注册一个处理函数</li>
<li>缺点：某些事件不支持用这种方式注册</li>
</ul>
<p>&#x3D;&#x3D;方式 3：使用 addEventListener 方法注册事件&#x3D;&#x3D;</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数1</span></span><br><span class="line">&#125;);</span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数2</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>这是最完美的事件注册方式，如果要移除用这种方式注册的事件，需要改写代码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">handler1</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">function</span> <span class="title function_">handler2</span>(<span class="params"></span>) &#123;</span><br><span class="line">  <span class="comment">// 处理函数2</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler1);</span><br><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler2);</span><br><span class="line"></span><br><span class="line">dom.<span class="title function_">removeEventListener</span>(<span class="string">&#x27;click&#x27;</span>, handler1); <span class="comment">// 移除监听函数1</span></span><br></pre></td></tr></table></figure>

<h4 id="事件处理函数"><a href="#事件处理函数" class="headerlink" title="事件处理函数"></a>事件处理函数</h4><p>当事件发生时，会自动调用事件处理函数，并向函数传递一个参数，该参数称之为事件对象，里面包含了事件发生的相关信息，比如鼠标位置、键盘按键等等</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">dom.<span class="title function_">addEventListener</span>(<span class="string">&#x27;click&#x27;</span>, <span class="keyword">function</span> (<span class="params">e</span>) &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(e.<span class="property">clientX</span>); <span class="comment">//打印鼠标的横坐标</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>常见的事件对象有：<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/MouseEvent">鼠标事件对象</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/KeyboardEvent/KeyboardEvent">键盘事件对象</a></p>
<p>另外，在事件处理函数中，<code>this</code>始终指向注册事件的 dom</p>
<h4 id="事件默认行为"><a href="#事件默认行为" class="headerlink" title="事件默认行为"></a>事件默认行为</h4><p>某些元素的某些事件，浏览器会有自己的默认行为</p>
<p>比如：</p>
<ul>
<li>a 元素的 click 事件，浏览器会跳转页面</li>
<li>form 元素的 submit 事件，浏览器会提交表单，最终导致页面刷新</li>
<li>文本框的 keydown 事件，浏览器会将按键文本显示到文本框中</li>
<li>……</li>
</ul>
<p>如果我们要阻止浏览器的默认行为，就需要在对应时间中加入以下代码：</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// e为事件对象</span></span><br><span class="line">e.<span class="title function_">preventDefault</span>();</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>JS</tag>
      </tags>
  </entry>
</search>
